*vlsi.txt*

                    Useful scripts for VLSI design ~

Authors: Yvain Thonnart
Version: 0.2
Date:    Jul 21, 2017
                                                                *vlsi-copyright*
Copyright: (c) 2009 - 2017 by the authors
           The VIM LICENSE applies to VLSI plugin
           (see |copyright|) except use vlsi instead of "Vim".
           NO WARRANTY, EXPRESS OR IMPLIED.  USE AT-YOUR-OWN-RISK.

==============================================================================
0. Contents                                                           *vlsi-toc*

        1. VLSI module yank & paste                            |vlsi-yank-paste|
        1.1 Commands                                  |vlsi-yank-paste-commands|
        1.2 Mappings                                  |vlsi-yank-paste-mappings|
        2. Changelog                                            |vlsi-changelog|

==============================================================================
1. VLSI module yank & paste                                    *vlsi-yank-paste*

The VLSI plugin defines module yank & paste, keeping a list of registered
modules in memory.

Each module is defined by:
    - its name
    - a set of generic parameters with their types and default value
    - a set of input and output ports, with their direction and range

Currently, the only available language is VHDL.
Yet, plugin architecture is modular with respect to filetype, so that
other VLSI module formats may be supported in the future, e.g. Verilog.

Summary:
|:VlsiYank|                            Yank the module containing the cursor
                                     default mapping: <M-F6>

|:VlsiList|                            Display the available module list
                                     default mapping: not mapped

|:VlsiDefineNew|                       Interactively capture a new module
                                     default mapping: <M-S-F6>

|:VlsiPasteAsEntity| [{modulename}]    Paste module definition
                                     default mapping: <S-F6>

|:VlsiPasteAsComponent| [{modulename}] Paste module interface
                                     default mapping: <C-F6>

|:VlsiPasteAsInstance| [{modulename}]  Paste module as bound instance
                                     default mapping: <F6>

------------------------------------------------------------------------------
1.2 Commands                                          *vlsi-yank-paste-commands*

                                                                     *:VlsiYank*
If you already have a module description with information on generic
parameters and ports, you can yank the module to the available module list
using the following command with the cursor within the module description:

    :VlsiYank

This command will identify the surrounding module, and parse the required
information (name, generic parameters, ports), retaining it in the available
module list

                                                                     *:VlsiList*
To see the available module list, use the following command:

    :VlsiList

This command will show all available module names on the cmdline, separated by
spaces.
Note that this command is actually internally called by all paste commands to
provide a completion list before paste. You do not need to list the modules
before starting module paste.

                                                                *:VlsiDefineNew*
To capture a new module interactively, use the following command:

    :VlsiDefineNew

You will be prompted first the name of the new module, then its generic
parameters and ports.
Once the capture terminated, the resulting module description is added to the
available module list.
The capture can be interrupted before the end by hitting <Ctrl-C>.

                                                            *:VlsiPasteAsEntity*
To paste a module definition from the available list, use the following
command:

    :VlsiPasteAsEntity [{modulename}]

In VHDL, this gives the module 'entity', with its 'generic' and 'port' fields.
If provided, {modulename} will be used to lookup the available module list,
and paste its corresponding module description. if no {modulename} is
provided, you will be prompted first the name of the module, with possible
completion using the <Tab> key.

                                                         *:VlsiPasteAsComponent*
To paste a module interface from the available list, use the following
command:

    :VlsiPasteAsComponent [{modulename}]

In VHDL, this gives the module 'component', with its 'generic' and 'port'
fields.
If provided, {modulename} will be used to lookup the available module list,
and paste its corresponding module description. if no {modulename} is
provided, you will be prompted first the name of the module, with possible
completion using the <Tab> key.

                                                          *:VlsiPasteAsInstance*
To paste a module from the available list as a bound instance, use the
following command:

    :VlsiPasteAsInstance [{modulename}]

In VHDL, this gives the module 'instance', with its 'generic map' and
'port map' fields. The generic map will be done with the default values
provided during module capture. It is up to you to change those values.
Similarly, the port map will straightforwardly bind all formal ports to actual
signals of the same name. You may change those or add prefixes/suffixes
afterwards.
If provided, {modulename} will be used to lookup the available module list,
and paste its corresponding module description. if no {modulename} is
provided, you will be prompted first the name of the module, with possible
completion using the <Tab> key.

------------------------------------------------------------------------------
1.2 Mappings                                          *vlsi-yank-paste-mappings*

normal mode <Plug> Mappings are defined to the yank and paste commands,
so you can define your own mappings:

    <Plug>VlsiList
    <Plug>VlsiDefineNew
    <Plug>VlsiYank
    <Plug>VlsiPasteAsEntity
    <Plug>VlsiPasteAsComponent
    <Plug>VlsiPasteAsInstance

To use a specific key or key combination in normal mode to trigger one of
these commands, put a line like this one in your .vimrc file.

    nmap <M-F6>  <Plug>VlsiYank

For more information on using <Plug> mappings, refer to |using-<Plug>|.

If not conflicting with your own mapping definitions, the following default
mappings are set for a recognized filetype:

    nmap <M-F6>   <Plug>VlsiYank
    nmap <M-S-F6> <Plug>VlsiDefineNew
    nmap <S-F6>   <Plug>VlsiPasteAsEntity
    nmap <C-F6>   <Plug>VlsiPasteAsComponent
    nmap <F6>     <Plug>VlsiPasteAsInstance

Note: <M-> means the Alt key,
      <C-> means the Control key,
      <S-> means the Shift key.

------------------------------------------------------------------------------
                                                            *vlsi-customization*
Specific filetype plugins for vlsi may define their own customization
variables.

Yet, currently, no customization is provided.

==============================================================================
2. Changelog                                                    *vlsi-changelog*

    0.2: Jul 21, 2017:  Wrapped in standalone vim plugin
    0.1: Oct 22, 2009:  First working version

==============================================================================
vim:tw=78:ts=8:ft=help
